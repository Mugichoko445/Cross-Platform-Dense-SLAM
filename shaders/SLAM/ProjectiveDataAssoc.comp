#version 430 core
layout (binding = 0, rgba32f) readonly uniform image2D currVertMap;	// Source vertex map
layout (binding = 1, rgba32f) readonly uniform image2D currNormMap;	// Source normal map
layout (binding = 2, rgba32f) readonly uniform image2D prevVertMap;	// Distance vertex map
layout (binding = 3, rgba32f) readonly uniform image2D prevNormMap;	// Distance normal map

layout (local_size_x = 20, local_size_y = 20) in;

layout (binding = 2, offset = 0) uniform atomic_uint g_icpDataIdx;

struct icpData
{
	float A[6];
	float b;
};
layout (std430, binding = 2) buffer icpDataDst
{
	icpData elemDst[];
};

uniform mat4 T;
uniform float ed;
uniform float et;
uniform float minZ;
uniform float maxZ;

void main(void)
{
	// Data association
	// Ref: "Linear Least-squares Optimization for Point-to-plane ICP Surface Registration" by K Low
	ivec2 u = ivec2(gl_GlobalInvocationID.xy);
	
	vec3 vs = imageLoad(currVertMap, u).xyz;
	vec3 ns = imageLoad(currNormMap, u).xyz;
	vec3 vd = imageLoad(prevVertMap, u).xyz;
	vec3 nd = imageLoad(prevNormMap, u).xyz;

	vec3 a = cross(vs, nd);
	float b = dot(nd, vd - vs);	// dot(nd, vd) - dot(nd, vs)

	// Create a mask image
	// Ref: KinectFusion by R. Newcombe, et al.
	bool eq1 = !(isnan(a.x) || isnan(a.y) || isnan(a.z) || isnan(b));
	eq1 = eq1 && vs.z > minZ && vs.z < maxZ && vd.z > minZ && vd.z < maxZ;
	bool eq2 = length(vd - vs) < ed;
	bool eq3 = dot(nd, ns) > et;

	if (eq1 && eq2 && eq3)
	{
		uint idxDst = atomicCounterIncrement(g_icpDataIdx);

		elemDst[idxDst].A[0] = a.x;
		elemDst[idxDst].A[1] = a.y;
		elemDst[idxDst].A[2] = a.z;
		elemDst[idxDst].A[3] = nd.x;
		elemDst[idxDst].A[4] = nd.y;
		elemDst[idxDst].A[5] = nd.z;
		elemDst[idxDst].b = b;
	}
	else {}
}